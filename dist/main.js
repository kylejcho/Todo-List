(()=>{"use strict";const e=()=>{document.querySelectorAll(".taskContainer").forEach((e=>{e.classList.remove("viewing")}));const e=document.querySelector(".taskViewContainer"),t=document.querySelector(".tasksContainer");if(e){e.style.transition="none";const n=e.getBoundingClientRect();e.style.position="absolute";const r=e.getBoundingClientRect(),a=n.left-r.left;e.style.transform="translateX("+a+"px)",t.style.transition="none",t.style.margin="48px auto auto auto",t.style.transform="translateX(-30%)",setTimeout((()=>{e.style.transition="all 0.4s cubic-bezier(.5, 0, 0, 1)",e.style.transform="translateX(calc("+a+"px + 15vw))",e.style.opacity="0",t.style.transition="all 0.3s cubic-bezier(0.5, 0, 0.5, 1)",t.style.transform="translateX(0)"}),10),setTimeout((()=>{e.remove()}),300)}},t=(e,t)=>{let n,r,a;""!=e?(n=e.target.parentNode.parentNode,r=e.target.parentNode.nextElementSibling,a=e.target.parentNode):(n=t.parentNode,r=t.nextElementSibling,a=t);const i=r.nextElementSibling,o=document.querySelector(".taskViewContainer"),s=document.querySelector(".taskViewCheckContainer"),c=document.querySelector(".taskViewName"),l=(e,t)=>{"task"==e?(n.classList.toggle("completed"),r.classList.toggle("completed"),a.classList.toggle("completed"),i.classList.toggle("completed"),a.innerHTML="completed"==t?'<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 512 512"><title>ionicons-v5-q</title><circle cx="256" cy="256" r="192" style="fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-width:32px"/></svg>':'<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 512 512"><title>ionicons-v5-e</title><path d="M256,48C141.31,48,48,141.31,48,256s93.31,208,208,208,208-93.31,208-208S370.69,48,256,48ZM364.25,186.29l-134.4,160a16,16,0,0,1-12,5.71h-.27a16,16,0,0,1-11.89-5.3l-57.6-64a16,16,0,1,1,23.78-21.4l45.29,50.32L339.75,165.71a16,16,0,0,1,24.5,20.58Z"/></svg>'):"taskView"==e&&(s.classList.toggle("completed"),c.classList.toggle("completed"),s.innerHTML="completed"==t?'<svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" viewBox="0 0 512 512"><title>ionicons-v5-q</title><circle cx="256" cy="256" r="192" style="fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-width:32px"/></svg>':'<svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" viewBox="0 0 512 512"><title>ionicons-v5-e</title><path d="M256,48C141.31,48,48,141.31,48,256s93.31,208,208,208,208-93.31,208-208S370.69,48,256,48ZM364.25,186.29l-134.4,160a16,16,0,0,1-12,5.71h-.27a16,16,0,0,1-11.89-5.3l-57.6-64a16,16,0,1,1,23.78-21.4l45.29,50.32L339.75,165.71a16,16,0,0,1,24.5,20.58Z"/></svg>')};n.className.includes("completed")?n.className.includes("completed")&&(l("task","completed"),o&&o.id=="s"+n.id&&l("taskView","completed")):(l("task"),o&&o.id=="s"+n.id&&l("taskView"));const u=r.parentNode,d=u.clientHeight,m=document.createElement("div");m.style.height=d+"px",m.style.marginBottom="-"+d+"px",m.style.transition="all ease-in-out 0.2s";const h=u.parentNode;if(n.className.includes("completed")&&u.nextElementSibling)u.parentNode.appendChild(m),setTimeout((()=>{u.style.opacity="0",u.style.marginBottom="-"+d+"px",m.style.marginBottom=0}),300),setTimeout((()=>{u.style.marginBottom=0,m.remove(),h.appendChild(u)}),500),setTimeout((()=>{u.style.opacity="1"}),600);else if(!n.className.includes("completed")&&u!=h.children[1]){const e=u.parentNode;e.insertBefore(m,e.children[1]),setTimeout((()=>{u.style.opacity="0",u.style.marginBottom="-"+d+"px",m.style.marginBottom=0}),300),setTimeout((()=>{u.style.marginBottom=0,m.remove(),e.insertBefore(u,e.children[1])}),500),setTimeout((()=>{u.style.opacity="100"}),600)}};function n(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function r(e){n(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function a(e){n(1,arguments);var t=r(e);return t.setHours(0,0,0,0),t}function i(){return a(Date.now())}function o(){var e=new Date,t=e.getFullYear(),n=e.getMonth(),r=e.getDate(),a=new Date(0);return a.setFullYear(t,n,r+1),a.setHours(0,0,0,0),a}function s(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function c(e,t){n(2,arguments);var a=r(e),i=s(t);return isNaN(i)?new Date(NaN):i?(a.setDate(a.getDate()+i),a):a}function l(e){return n(1,arguments),e instanceof Date||"object"==typeof e&&"[object Date]"===Object.prototype.toString.call(e)}function u(e){if(n(1,arguments),!l(e)&&"number"!=typeof e)return!1;var t=r(e);return!isNaN(Number(t))}var d={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function m(e){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.width?String(t.width):e.defaultWidth,r=e.formats[n]||e.formats[e.defaultWidth];return r}}var h,g={date:m({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:m({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:m({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},f={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function w(e){return function(t,n){var r,a=n||{};if("formatting"===(a.context?String(a.context):"standalone")&&e.formattingValues){var i=e.defaultFormattingWidth||e.defaultWidth,o=a.width?String(a.width):i;r=e.formattingValues[o]||e.formattingValues[i]}else{var s=e.defaultWidth,c=a.width?String(a.width):e.defaultWidth;r=e.values[c]||e.values[s]}return r[e.argumentCallback?e.argumentCallback(t):t]}}function y(e){return function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=n.width,a=r&&e.matchPatterns[r]||e.matchPatterns[e.defaultMatchWidth],i=t.match(a);if(!i)return null;var o,s=i[0],c=r&&e.parsePatterns[r]||e.parsePatterns[e.defaultParseWidth],l=Array.isArray(c)?v(c,(function(e){return e.test(s)})):p(c,(function(e){return e.test(s)}));o=e.valueCallback?e.valueCallback(l):l,o=n.valueCallback?n.valueCallback(o):o;var u=t.slice(s.length);return{value:o,rest:u}}}function p(e,t){for(var n in e)if(e.hasOwnProperty(n)&&t(e[n]))return n}function v(e,t){for(var n=0;n<e.length;n++)if(t(e[n]))return n}const b={code:"en-US",formatDistance:function(e,t,n){var r,a=d[e];return r="string"==typeof a?a:1===t?a.one:a.other.replace("{{count}}",t.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+r:r+" ago":r},formatLong:g,formatRelative:function(e,t,n,r){return f[e]},localize:{ordinalNumber:function(e,t){var n=Number(e),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:w({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:w({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:w({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:w({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:w({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(h={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.match(h.matchPattern);if(!n)return null;var r=n[0],a=e.match(h.parsePattern);if(!a)return null;var i=h.valueCallback?h.valueCallback(a[0]):a[0];i=t.valueCallback?t.valueCallback(i):i;var o=e.slice(r.length);return{value:i,rest:o}}),era:y({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:y({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:y({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:y({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:y({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};function T(e,t){n(2,arguments);var a=r(e).getTime(),i=s(t);return new Date(a+i)}function k(e,t){n(2,arguments);var r=s(t);return T(e,-r)}var C=864e5;function S(e){n(1,arguments);var t=1,a=r(e),i=a.getUTCDay(),o=(i<t?7:0)+i-t;return a.setUTCDate(a.getUTCDate()-o),a.setUTCHours(0,0,0,0),a}function x(e){n(1,arguments);var t=r(e),a=t.getUTCFullYear(),i=new Date(0);i.setUTCFullYear(a+1,0,4),i.setUTCHours(0,0,0,0);var o=S(i),s=new Date(0);s.setUTCFullYear(a,0,4),s.setUTCHours(0,0,0,0);var c=S(s);return t.getTime()>=o.getTime()?a+1:t.getTime()>=c.getTime()?a:a-1}function N(e){n(1,arguments);var t=x(e),r=new Date(0);r.setUTCFullYear(t,0,4),r.setUTCHours(0,0,0,0);var a=S(r);return a}var D=6048e5;function E(e,t){n(1,arguments);var a=t||{},i=a.locale,o=i&&i.options&&i.options.weekStartsOn,c=null==o?0:s(o),l=null==a.weekStartsOn?c:s(a.weekStartsOn);if(!(l>=0&&l<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var u=r(e),d=u.getUTCDay(),m=(d<l?7:0)+d-l;return u.setUTCDate(u.getUTCDate()-m),u.setUTCHours(0,0,0,0),u}function L(e,t){n(1,arguments);var a=r(e),i=a.getUTCFullYear(),o=t||{},c=o.locale,l=c&&c.options&&c.options.firstWeekContainsDate,u=null==l?1:s(l),d=null==o.firstWeekContainsDate?u:s(o.firstWeekContainsDate);if(!(d>=1&&d<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var m=new Date(0);m.setUTCFullYear(i+1,0,d),m.setUTCHours(0,0,0,0);var h=E(m,t),g=new Date(0);g.setUTCFullYear(i,0,d),g.setUTCHours(0,0,0,0);var f=E(g,t);return a.getTime()>=h.getTime()?i+1:a.getTime()>=f.getTime()?i:i-1}function M(e,t){n(1,arguments);var r=t||{},a=r.locale,i=a&&a.options&&a.options.firstWeekContainsDate,o=null==i?1:s(i),c=null==r.firstWeekContainsDate?o:s(r.firstWeekContainsDate),l=L(e,t),u=new Date(0);u.setUTCFullYear(l,0,c),u.setUTCHours(0,0,0,0);var d=E(u,t);return d}var q=6048e5;function P(e,t){for(var n=e<0?"-":"",r=Math.abs(e).toString();r.length<t;)r="0"+r;return n+r}const U=function(e,t){var n=e.getUTCFullYear(),r=n>0?n:1-n;return P("yy"===t?r%100:r,t.length)},W=function(e,t){var n=e.getUTCMonth();return"M"===t?String(n+1):P(n+1,2)},Y=function(e,t){return P(e.getUTCDate(),t.length)},B=function(e,t){return P(e.getUTCHours()%12||12,t.length)},H=function(e,t){return P(e.getUTCHours(),t.length)},O=function(e,t){return P(e.getUTCMinutes(),t.length)},A=function(e,t){return P(e.getUTCSeconds(),t.length)},F=function(e,t){var n=t.length,r=e.getUTCMilliseconds();return P(Math.floor(r*Math.pow(10,n-3)),t.length)};function j(e,t){var n=e>0?"-":"+",r=Math.abs(e),a=Math.floor(r/60),i=r%60;if(0===i)return n+String(a);var o=t||"";return n+String(a)+o+P(i,2)}function V(e,t){return e%60==0?(e>0?"-":"+")+P(Math.abs(e)/60,2):z(e,t)}function z(e,t){var n=t||"",r=e>0?"-":"+",a=Math.abs(e);return r+P(Math.floor(a/60),2)+n+P(a%60,2)}const X={G:function(e,t,n){var r=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});default:return n.era(r,{width:"wide"})}},y:function(e,t,n){if("yo"===t){var r=e.getUTCFullYear(),a=r>0?r:1-r;return n.ordinalNumber(a,{unit:"year"})}return U(e,t)},Y:function(e,t,n,r){var a=L(e,r),i=a>0?a:1-a;return"YY"===t?P(i%100,2):"Yo"===t?n.ordinalNumber(i,{unit:"year"}):P(i,t.length)},R:function(e,t){return P(x(e),t.length)},u:function(e,t){return P(e.getUTCFullYear(),t.length)},Q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(r);case"QQ":return P(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(r);case"qq":return P(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(e,t,n){var r=e.getUTCMonth();switch(t){case"M":case"MM":return W(e,t);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(e,t,n){var r=e.getUTCMonth();switch(t){case"L":return String(r+1);case"LL":return P(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(e,t,a,i){var o=function(e,t){n(1,arguments);var a=r(e),i=E(a,t).getTime()-M(a,t).getTime();return Math.round(i/q)+1}(e,i);return"wo"===t?a.ordinalNumber(o,{unit:"week"}):P(o,t.length)},I:function(e,t,a){var i=function(e){n(1,arguments);var t=r(e),a=S(t).getTime()-N(t).getTime();return Math.round(a/D)+1}(e);return"Io"===t?a.ordinalNumber(i,{unit:"week"}):P(i,t.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getUTCDate(),{unit:"date"}):Y(e,t)},D:function(e,t,a){var i=function(e){n(1,arguments);var t=r(e),a=t.getTime();t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0);var i=t.getTime(),o=a-i;return Math.floor(o/C)+1}(e);return"Do"===t?a.ordinalNumber(i,{unit:"dayOfYear"}):P(i,t.length)},E:function(e,t,n){var r=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(e,t,n,r){var a=e.getUTCDay(),i=(a-r.weekStartsOn+8)%7||7;switch(t){case"e":return String(i);case"ee":return P(i,2);case"eo":return n.ordinalNumber(i,{unit:"day"});case"eee":return n.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},c:function(e,t,n,r){var a=e.getUTCDay(),i=(a-r.weekStartsOn+8)%7||7;switch(t){case"c":return String(i);case"cc":return P(i,t.length);case"co":return n.ordinalNumber(i,{unit:"day"});case"ccc":return n.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(a,{width:"narrow",context:"standalone"});case"cccccc":return n.day(a,{width:"short",context:"standalone"});default:return n.day(a,{width:"wide",context:"standalone"})}},i:function(e,t,n){var r=e.getUTCDay(),a=0===r?7:r;switch(t){case"i":return String(a);case"ii":return P(a,t.length);case"io":return n.ordinalNumber(a,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(e,t,n){var r=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(e,t,n){var r,a=e.getUTCHours();switch(r=12===a?"noon":0===a?"midnight":a/12>=1?"pm":"am",t){case"b":case"bb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(e,t,n){var r,a=e.getUTCHours();switch(r=a>=17?"evening":a>=12?"afternoon":a>=4?"morning":"night",t){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){var r=e.getUTCHours()%12;return 0===r&&(r=12),n.ordinalNumber(r,{unit:"hour"})}return B(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getUTCHours(),{unit:"hour"}):H(e,t)},K:function(e,t,n){var r=e.getUTCHours()%12;return"Ko"===t?n.ordinalNumber(r,{unit:"hour"}):P(r,t.length)},k:function(e,t,n){var r=e.getUTCHours();return 0===r&&(r=24),"ko"===t?n.ordinalNumber(r,{unit:"hour"}):P(r,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):O(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):A(e,t)},S:function(e,t){return F(e,t)},X:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();if(0===a)return"Z";switch(t){case"X":return V(a);case"XXXX":case"XX":return z(a);default:return z(a,":")}},x:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"x":return V(a);case"xxxx":case"xx":return z(a);default:return z(a,":")}},O:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+j(a,":");default:return"GMT"+z(a,":")}},z:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+j(a,":");default:return"GMT"+z(a,":")}},t:function(e,t,n,r){var a=r._originalDate||e;return P(Math.floor(a.getTime()/1e3),t.length)},T:function(e,t,n,r){return P((r._originalDate||e).getTime(),t.length)}};function G(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}}function R(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}}var Q={p:R,P:function(e,t){var n,r=e.match(/(P+)(p+)?/)||[],a=r[1],i=r[2];if(!i)return G(e,t);switch(a){case"P":n=t.dateTime({width:"short"});break;case"PP":n=t.dateTime({width:"medium"});break;case"PPP":n=t.dateTime({width:"long"});break;default:n=t.dateTime({width:"full"})}return n.replace("{{date}}",G(a,t)).replace("{{time}}",R(i,t))}};const Z=Q;function I(e){var t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),e.getTime()-t.getTime()}var J=["D","DD"],$=["YY","YYYY"];function _(e){return-1!==J.indexOf(e)}function K(e){return-1!==$.indexOf(e)}function ee(e,t,n){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"))}var te=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,ne=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,re=/^'([^]*?)'?$/,ae=/''/g,ie=/[a-zA-Z]/;function oe(e,t,a){n(2,arguments);var i=String(t),o=a||{},c=o.locale||b,l=c.options&&c.options.firstWeekContainsDate,d=null==l?1:s(l),m=null==o.firstWeekContainsDate?d:s(o.firstWeekContainsDate);if(!(m>=1&&m<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var h=c.options&&c.options.weekStartsOn,g=null==h?0:s(h),f=null==o.weekStartsOn?g:s(o.weekStartsOn);if(!(f>=0&&f<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!c.localize)throw new RangeError("locale must contain localize property");if(!c.formatLong)throw new RangeError("locale must contain formatLong property");var w=r(e);if(!u(w))throw new RangeError("Invalid time value");var y=I(w),p=k(w,y),v={firstWeekContainsDate:m,weekStartsOn:f,locale:c,_originalDate:w},T=i.match(ne).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,Z[t])(e,c.formatLong,v):e})).join("").match(te).map((function(n){if("''"===n)return"'";var r=n[0];if("'"===r)return se(n);var a=X[r];if(a)return!o.useAdditionalWeekYearTokens&&K(n)&&ee(n,t,e),!o.useAdditionalDayOfYearTokens&&_(n)&&ee(n,t,e),a(p,n,c.localize,v);if(r.match(ie))throw new RangeError("Format string contains an unescaped latin alphabet character `"+r+"`");return n})).join("");return T}function se(e){return e.match(re)[1].replace(ae,"'")}function ce(e){n(1,arguments);var t=r(e),a=t.getHours();return a}const le=e=>c(e,7);let ue=[],de=[];const me=(e,t,n,r,a)=>{let i=he(),o=new class{constructor(e,t,n,r,a,i){this.name=e,this.description=t,this.dueDate=n,this.list=r,this.status=a,this.key=i}getName(){return this.name}setName(e){this.name=e}setDescription(e){this.description=e}setDueDate(e){this.dueDate=e}setList(e){this.list=e}}(e,t,n,r,a,i);ue.push(o),de.includes(r)||null==r||(de.push(r),console.log(de),xe(r),Ne(r));const s=document.querySelector(".tasksContainer");null!=r&&s.id.includes("ListContainer")&&s.id!=r+"ListContainer"||null==r&&s.id.includes("ListContainer")||(Ce(e,t,n,r,a,i),console.log(ue))},he=()=>{let e=0;if(ue.length>0)for(let t=0;t<ue.length;t++)ue[t].key==e&&e++;return e},ge=me;function fe(e,t){n(2,arguments);var r=a(e),i=a(t);return r.getTime()===i.getTime()}function we(e){return n(1,arguments),fe(e,Date.now())}function ye(e,t){n(1,arguments);var a=t||{},i=a.locale,o=i&&i.options&&i.options.weekStartsOn,c=null==o?0:s(o),l=null==a.weekStartsOn?c:s(a.weekStartsOn);if(!(l>=0&&l<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var u=r(e),d=u.getDay(),m=(d<l?7:0)+d-l;return u.setDate(u.getDate()-m),u.setHours(0,0,0,0),u}function pe(e,t,r){n(2,arguments);var a=ye(e,r),i=ye(t,r);return a.getTime()===i.getTime()}function ve(e,t){return n(1,arguments),pe(e,Date.now(),t)}function be(e){return n(1,arguments),fe(e,c(Date.now(),1))}const Te=(e,t)=>{const n=document.createElement("div");n.id="list"==t?e+"ListContainer":e+"Container",n.className="tasksContainer";const r=document.createElement("div");r.id="titleContainer",r.className="tasksTitle",n.append(r),"today"==e?(r.innerText="Today",ke("today",n),ue.forEach((e=>{we(e.dueDate)&&setTimeout((()=>{Ce(e.name,e.description,e.dueDate,e.list,e.status,e.key,"no shadow")}),10)}))):"week"==e?(r.innerText="Next 7 Days",ke("today",n,"title"),ke("tomorrow",n,"title"),ue.forEach((e=>{ve(e.dueDate)&&setTimeout((()=>{Ce(e.name,e.description,e.dueDate,e.list,e.status,e.key,"no shadow")}),10)}))):"home"==e||"allTasks"==e?("home"==e?(()=>{if(ce(new Date)<12)return!0})()?r.innerText="Good Morning, Kyle.":(()=>{if(ce(new Date)>=12&&ce(new Date)<18)return!0})()?r.innerText="Good Afternoon, Kyle.":r.innerText="Good Evening, Kyle.":r.innerText="All Tasks",ke("today",n,"title"),ke("tomorrow",n,"title"),ke("upcoming",n,"title"),ue.forEach((e=>{setTimeout((()=>{Ce(e.name,e.description,e.dueDate,e.list,e.status,e.key,"no shadow")}),10)}))):(r.innerText=e,ke("today",n,"title"),ke("tomorrow",n,"title"),ke("upcoming",n,"title"),ue.forEach((t=>{t.list==e&&setTimeout((()=>{Ce(t.name,t.description,t.dueDate,t.list,t.status,t.key,"no shadow")}),10)}))),document.querySelector("#contentContainer").append(n),n.style.pointerEvents="none",setTimeout((()=>{n.style.pointerEvents="unset"}),500),console.log(ue)},ke=(e,t,n)=>{const r=document.createElement("div");r.className="subGroup",r.id=e;const a=document.createElement("p");var i;a.className="subGroupTitle",a.innerText=(i=e)[0].toUpperCase()+i.slice(1),n?r.append(a):(r.append(a),a.style.opacity="0",a.style.height="0",a.style.margin="0"),t.append(r)},Ce=(e,t,n,r,a,i,o)=>{const s=document.createElement("div");s.className="taskContainer",s.id=i;const c=document.createElement("div");c.className="checkContainer",c.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 512 512"><title>ionicons-v5-q</title><circle cx="256" cy="256" r="192" style="fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-width:32px"/></svg>';const l=document.createElement("div");l.className="nameContainer",l.innerText=e;const u=document.createElement("div");u.className="deleteContainer",u.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 512 512"><title>ionicons-v5-m</title><path d="M256,48C141.31,48,48,141.31,48,256s93.31,208,208,208,208-93.31,208-208S370.69,48,256,48Zm75.31,260.69a16,16,0,1,1-22.62,22.62L256,278.63l-52.69,52.68a16,16,0,0,1-22.62-22.62L233.37,256l-52.68-52.69a16,16,0,0,1,22.62-22.62L256,233.37l52.69-52.68a16,16,0,0,1,22.62,22.62L278.63,256Z"/></svg>';const d=document.createElement("div");let m;if(d.className="descriptionContainer",d.innerText=t,s.append(c),s.append(l),s.append(u),s.append(d),we(n))m=document.querySelector("#today");else if(be(n)){if("todayContainer"==document.querySelector(".tasksContainer").id)return;m=document.querySelector("#tomorrow")}else m=document.querySelector("#upcoming");"completed"==a?(s.classList.add("completed"),s.children[0].classList.toggle("completed"),s.children[0].innerHTML='<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 512 512"><title>ionicons-v5-e</title><path d="M256,48C141.31,48,48,141.31,48,256s93.31,208,208,208,208-93.31,208-208S370.69,48,256,48ZM364.25,186.29l-134.4,160a16,16,0,0,1-12,5.71h-.27a16,16,0,0,1-11.89-5.3l-57.6-64a16,16,0,1,1,23.78-21.4l45.29,50.32L339.75,165.71a16,16,0,0,1,24.5,20.58Z"/></svg>',s.children[1].classList.toggle("completed"),s.children[2].classList.toggle("completed"),m.appendChild(s)):m.insertBefore(s,m.children[1]),((e,t)=>{setTimeout((()=>{"no shadow"==t?e.style.transition="none":e.style.animation="taskContainerAdd 0.8s ease-in-out",e.style.opacity="1"}),10),setTimeout((()=>{e.style.transition="all ease-in-out 0.2s"}),300)})(s,o)},Se=()=>{let e=0,t=0,n=0;ue.forEach((r=>{e++,we(r.dueDate)&&t++,ve(r.dueDate)&&n++}));const r=document.querySelector("#todayCount"),a=document.querySelector("#weekCount"),i=document.querySelector("#allCount");r.innerText=t,a.innerText=n,i.innerText=e},xe=e=>{const t=document.querySelector("#sidebarLists"),n=document.createElement("div");n.className="sidebarListContainer",n.classList.add("sidebarTab"),t.append(n);const r=document.createElement("div");r.className="dot";const a=document.createElement("p");a.innerText=e,n.append(r),n.append(a)},Ne=e=>{const t=document.querySelector("#inputListOptions");de.forEach((n=>{if(e==n){const n=document.createElement("p");n.className="inputListItem",n.innerText=e,n.id=e+"List",t.append(n)}}))},De=document.querySelector("#addButton"),Ee=document.querySelector("#taskFormAddButton"),Le=document.querySelector("#inputTaskName"),Me=document.querySelector("#inputTaskDescription"),qe=document.querySelectorAll(".inputDueDate"),Pe=document.querySelector("#taskFormContainer"),Ue=document.querySelector("#taskForm"),We=document.querySelector("#contentContainer"),Ye=document.querySelector("#sidebar"),Be=document.querySelector("#sidebarShortcuts"),He=document.querySelector("#sidebarLists"),Oe=()=>{Ue.style.opacity="0",Pe.style.visibility="hidden",Ue.style.transform="scale(0)",Le.value="",Me.value="",qe.forEach((e=>{e.classList.remove("selected")})),qe[0].classList.toggle("selected"),document.querySelector("#listSelectionName").innerText="Add to list",document.querySelectorAll(".inputListItem").forEach((e=>{e.classList.remove("selected")}))},Ae=e=>{const t=document.querySelectorAll(".sidebarShortcut"),n=document.querySelector("#sidebarHome"),r=document.querySelectorAll(".sidebarListContainer");n.classList.remove("viewing");for(let e=0;e<t.length;e++)t[e].classList.remove("viewing"),t[e].children[0].classList.remove("viewing");for(let e=0;e<r.length;e++)r[e].classList.remove("viewing"),r[e].children[0].classList.remove("viewing");e.target.classList.toggle("viewing"),e.target.children[0].classList.toggle("viewing")},Fe=t=>{const n=ue.find((e=>{if(e.key==t.id)return!0})),r=document.querySelector(".taskViewContainer");if(r){if(r.id=="s"+n.key)return void e();r.style.opacity="0",setTimeout((()=>{r.remove()}),200)}else document.querySelector(".tasksContainer").style.transform="translateX(-30%)";((e,t)=>{document.querySelectorAll(".taskContainer").forEach((e=>{e.classList.remove("viewing")})),t.classList.toggle("viewing");const n=document.createElement("div");n.className="taskViewContainer",n.id="s"+e.key;const r=document.createElement("div");r.className="taskViewNameContainer",n.append(r);const a=document.createElement("div");a.className="taskViewCheckContainer",a.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" viewBox="0 0 512 512"><title>ionicons-v5-q</title><circle cx="256" cy="256" r="192" style="fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-width:32px"/></svg>',r.append(a);const i=document.createElement("p");i.className="taskViewName",i.innerText=e.name,r.append(i);const o=document.createElement("div");o.className="taskViewDescriptionContainer",o.innerText="Description:",n.append(o);const s=document.createElement("p");s.className="taskViewDescription",s.innerText=e.description,o.append(s);const c=document.createElement("div");c.className="taskViewDueDateContainer",c.innerText="Due:",n.append(c);const l=document.createElement("div");l.className="taskViewDueDate";const u=oe(e.dueDate,"EEEE, LLLL do, yyyy"),d='<svg xmlns="http://www.w3.org/2000/svg" width="15" height="15" viewBox="0 0 512 512"><title>ionicons-v5-b</title><path d="M190.06,414,353.18,274.22a24,24,0,0,0,0-36.44L190.06,98c-15.57-13.34-39.62-2.28-39.62,18.22V395.82C150.44,416.32,174.49,427.38,190.06,414Z"/></svg>';we(e.dueDate)?l.innerHTML=`Today ${d} ${u}`:be(e.dueDate)?l.innerHTML=`Tomorrow ${d} ${u}`:l.innerHTML=u,c.append(l);const m=document.querySelector(".tasksContainer");m.style.transition="all 0.25s cubic-bezier(0.5, 0, 0.5, 1)",t.className.includes("completed")&&(a.style.animation="checkClick 0.3s ease-out",a.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" viewBox="0 0 512 512"><title>ionicons-v5-e</title><path d="M256,48C141.31,48,48,141.31,48,256s93.31,208,208,208,208-93.31,208-208S370.69,48,256,48ZM364.25,186.29l-134.4,160a16,16,0,0,1-12,5.71h-.27a16,16,0,0,1-11.89-5.3l-57.6-64a16,16,0,1,1,23.78-21.4l45.29,50.32L339.75,165.71a16,16,0,0,1,24.5,20.58Z"/></svg>',i.classList.toggle("completed"),a.classList.toggle("completed")),((e,t)=>{setTimeout((()=>{e.style.transition="none",e.style.margin="48px 0 auto 30%",e.style.transform="translateX(0)",document.querySelector("#contentContainer").append(t),t.style.transform="translateX(15vw)",setTimeout((()=>{t.style.opacity="1",t.style.transform="translateX(0)"}),10)}),250)})(m,n)})(n,t)};(()=>{const e=document.querySelector("#loadingScreen");window.addEventListener("load",(()=>{const t=document.querySelector("body");t.style.overflowY="hidden",setTimeout((()=>{e.style.opacity="0"}),500),setTimeout((()=>{e.remove(),t.style.overflowY="visible"}),1e3)}))})(),Te("home"),document.querySelector(".todayIconNumber").innerHTML=oe(i(),"d"),me("Dinner at Olive Garden","Pick up sister on the way",i()),me("PHYS231 homework assignment","Chapter 14, questions 1-13",i(),"School"),me("Exercise","Workout out for 45 minutes",i()),me("Coffee with friend","Starbucks",i()),me("Baking class","Bring homemade pie",i(),"School"),me("Read Animal Farm","Read two chapter",o(),"Reading"),me("Learn sign language","Practice english alphabet",o(),"Personal"),me("BIO231 homework assignment","Chapter 12, questions 1-8",le(i()),"School"),me("Exercise","Workout out for 45 minutes",le(i())),me("Coffee with friend","Starbucks",le(i())),me("PSYC100 module assignment","Chapters 1 - 3",le(i()),"School"),me("Bird watching","Bring sliced breed",le(i()),"Personal"),De.addEventListener("click",(function(){Pe.style.visibility="visible",Ue.style.opacity="1",Ue.style.transform="scale(1)"})),document.addEventListener("click",(e=>{if(e.target.parentNode.className.includes("checkContainer")){const n=e.target.parentNode.parentNode;ue.forEach((t=>{t.key==n.id&&("checkContainer"==e.target.parentNode.className?t.status="completed":t.status="")})),t(e,""),console.log(ue)}else if(e.target.parentNode.className.includes("taskViewCheckContainer")){const n=e.target.parentNode.parentNode.parentNode.id[1].toString();let r;document.querySelectorAll(".taskContainer").forEach((e=>{e.id==n&&(r=e)})),ue.forEach((t=>{t.key==r.id&&("taskViewCheckContainer"==e.target.parentNode.className?t.status="completed":t.status="")})),t("",r.children[0])}})),Ee.addEventListener("click",(function(){if(Le.value){let e,t;qe.forEach((t=>{t.className.includes("selected")&&("inputToday"==t.id?e=i():"inputTomorrow"==t.id&&(e=o()))})),document.querySelectorAll(".inputListItem").forEach((e=>{e.className.includes("selected")&&(t=e.id.replace("List",""))})),ge(Le.value,Me.value,e,t),Oe(),Se()}})),Pe.addEventListener("click",(e=>{qe.forEach((e=>{e.addEventListener("click",(()=>{qe.forEach((e=>{e.classList.remove("selected")})),e.classList.toggle("selected")}))}))})),(()=>{const e=document.querySelectorAll(".inputListItem"),t=document.querySelector("#listSelectionName");e.forEach((n=>{n.addEventListener("click",(()=>{e.forEach((e=>{e.classList.remove("selected")})),n.classList.toggle("selected"),t.innerText=n.innerText}))})),inputListContainer.addEventListener("click",(()=>{inputListContainer.classList.toggle("selected")}))})(),Pe.addEventListener("click",(e=>{"taskFormContainer"==e.target.id&&Oe()})),Ye.addEventListener("click",(e=>{!e.target.className.includes("sidebarTab")&&"sidebarHome"!=e.target.id||e.target.className.includes("viewing")||(Ae(e),document.querySelector(".tasksContainer").style.transition="all 0.3s cubic-bezier(0.5, 0, 0.5, 1)",document.querySelector(".tasksContainer").style.opacity=0,document.querySelector(".taskViewContainer")&&(document.querySelector(".taskViewContainer").style.opacity=0),setTimeout((()=>{document.querySelector(".tasksContainer")&&(document.querySelector(".tasksContainer").remove(),document.querySelector(".taskViewContainer")&&document.querySelector(".taskViewContainer").remove())}),300),setTimeout((()=>{"sidebarHome"==e.target.id?Te("home"):"sidebarShortcutsToday"==e.target.id?Te("today"):"sidebarShortcutsWeek"==e.target.id?Te("week"):"sidebarShortcutsAllTasks"==e.target.id?Te("allTasks"):Te(e.target.children[1].innerText,"list")}),350))})),Ye.addEventListener("click",(e=>{if(e.target.className.includes("sidebarArrow")){const t=e.target;t.className.includes("close")?t.parentNode.nextElementSibling.style.marginBottom="0":"shortcutsArrow"==e.target.id?t.parentNode.nextElementSibling.style.marginBottom=-Be.clientHeight+"px":t.parentNode.nextElementSibling.style.marginBottom=-He.clientHeight+"px",t.parentNode.nextElementSibling.classList.toggle("close"),t.classList.toggle("close")}})),We.addEventListener("click",(e=>{const t=e.target;"taskContainer"!=t.className&&"taskContainer completed"!=t.className||Fe(t)})),We.addEventListener("click",(t=>{t.target==document.querySelector("#contentContainer")&&e()})),We.addEventListener("click",(e=>{if("deleteContainer"==e.target.parentNode.className||"deleteContainer completed"==e.target.parentNode.className){const t=e.target.parentNode.parentNode;(e=>{const t=e.clientHeight;e.style.opacity="0",e.transform="translateY(-100%)",e.style.marginBottom="-"+t+"px",setTimeout((()=>{e.remove()}),200)})(t),ue.forEach((e=>{t.id==e.key&&ue.splice(ue.indexOf(e),1)})),Se()}})),Se()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,